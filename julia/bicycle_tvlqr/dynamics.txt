#include <math.h>
void tiny_Bicycle3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = 0.16666666666666666 * (0.4 * cos(0.05 * tan(u[1]) * u[0] + x[2]) * u[0] + 0.1 * cos(0.1 * tan(u[1]) * u[0] + x[2]) * u[0] + 0.1 * cos(x[2]) * u[0]) + x[0];
  xn[1] = 0.16666666666666666 * (0.4 * sin(0.05 * tan(u[1]) * u[0] + x[2]) * u[0] + 0.1 * sin(0.1 * tan(u[1]) * u[0] + x[2]) * u[0] + 0.1 * sin(x[2]) * u[0]) + x[1];
  xn[2] = 0.09999999999999999 * tan(u[1]) * u[0] + x[2];
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLARI AIS Kinematic model (2024/04/25) 11:10AM
// # ==================== gait frequency = 10Hz and TinyMPC frequency = 5Hz; H = 0.2;
// # ==================== uses the typical midpoint method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.00028500000000000004 * u[0] * cos(0.0475 * u[1] + x[2]);
  xn[1] = x[1] + 0.00028500000000000004 * u[0] * sin(0.0475 * u[1] + x[2]);
  xn[2] = 0.095 * u[1] + x[2];
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLARI AIS Kinematic model (2024/04/30) 10:13AM
// # ==================== gait frequency = 10Hz and TinyMPC frequency = 5Hz;
// # ==================== H = 0.2; H_phi = 0.1; N = 2;
// # ==================== uses the gait-averaged forward-Euler method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.00028500000000000004 * u[0] * cos(0.095 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * cos(x[2]);
  xn[1] = x[1] + 0.00028500000000000004 * u[0] * sin(0.095 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * sin(x[2]);
  xn[2] = 0.19 * u[1] + x[2];
}

// CLARI AIS Kinematic model (2024/04/30) 10:38AM
// # ==================== gait frequency = 10Hz and TinyMPC frequency = 5Hz;
// # ==================== H = 0.2; H_phi = 0.1; N = 2;
// # ==================== uses the gait-averaged midpoint method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.00028500000000000004 * u[0] * cos(0.095 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * cos(0.19 * u[1] + x[2]);
  xn[1] = x[1] + 0.00028500000000000004 * u[0] * sin(0.095 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * sin(0.19 * u[1] + x[2]);
  xn[2] = 0.19 * u[1] + x[2];
}

// CLARI AIS Kinematic model (2024/04/30) 10:49AM
// # ==================== gait frequency = 10Hz and TinyMPC frequency = 5Hz;
// # ==================== H = 0.2; H_phi = 0.1; N = 2;
// # ==================== uses the gait-averaged RK4 method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.16666666666666666 * (0.00028500000000000004 * u[0] * cos(0.28500000000000003 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * cos(0.095 * u[1] + x[2]) + 4 * (0.00028500000000000004 * u[0] * cos(0.095 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * cos(0.19 * u[1] + x[2])) + 0.00028500000000000004 * u[0] * cos(0.19 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * cos(x[2]));
  xn[1] = x[1] + 0.16666666666666666 * (0.00028500000000000004 * u[0] * sin(0.095 * u[1] + x[2]) + 4 * (0.00028500000000000004 * u[0] * sin(0.095 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * sin(0.19 * u[1] + x[2])) + 0.00028500000000000004 * u[0] * sin(0.19 * u[1] + x[2]) + 0.00028500000000000004 * u[0] * sin(x[2]) + 0.00028500000000000004 * u[0] * sin(0.28500000000000003 * u[1] + x[2]));
  xn[2] = 0.19 * u[1] + x[2];
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLARI AIS Kinematic model (2024/04/30) 4:40PM
// # ==================== gait frequency = 20Hz and TinyMPC frequency = 10Hz;
// # ==================== H = 0.1; H_phi = 0.05; N = 2;
// # ==================== uses the gait-averaged forward-Euler method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.00014250000000000002 * u[0] * cos(0.0475 * u[1] + x[2]) + 0.00014250000000000002 * u[0] * cos(x[2]);
  xn[1] = x[1] + 0.00014250000000000002 * u[0] * sin(x[2]) + 0.00014250000000000002 * u[0] * sin(0.0475 * u[1] + x[2]);
  xn[2] = 0.095 * u[1] + x[2];
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLARI AIS Kinematic model (2024/04/30) 5:14PM
// # ==================== gait frequency = 20Hz and TinyMPC frequency = 10Hz;
// # ==================== H = 0.1; H_phi = 0.05; N = 2;
// # ==================== states: [x, y, cos(yaw), sin(yaw)]
// # ==================== uses the gait-averaged forward-Euler method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.00014250000000000002 * u[0] * x[2] + 0.00014250000000000002 * u[0] * (x[2] + -0.0475 * u[1] * x[3]);
  xn[1] = x[1] + 0.00014250000000000002 * u[0] * x[3] + 0.00014250000000000002 * u[0] * (x[3] + 0.0475 * u[1] * x[2]);
  xn[2] = x[2] + -0.0475 * u[1] * x[3] + -0.0475 * u[1] * (x[3] + 0.0475 * u[1] * x[2]);
  xn[3] = x[3] + 0.0475 * u[1] * x[2] + 0.0475 * u[1] * (x[2] + -0.0475 * u[1] * x[3]);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLARI AIS Kinematic model (2024/05/01) 8:00AM
// # ==================== gait frequency = 20Hz and TinyMPC frequency = 20Hz;
// # ==================== H = 0.05; H_phi = 0.05; N = 1;
// # ==================== states: [x, y, cos(yaw), sin(yaw)]
// # ==================== uses the gait-averaged forward-Euler method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.00014250000000000002 * u[0] * x[2];
  xn[1] = x[1] + 0.00014250000000000002 * u[0] * x[3];
  xn[2] = x[2] + -0.0475 * u[1] * x[3];
  xn[3] = x[3] + 0.0475 * u[1] * x[2];
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLARI AIS Kinematic model (2024/05/03) 1:48AM
// # ==================== gait frequency = 20Hz and TinyMPC frequency = 20Hz;
// # ==================== H = 0.05; H_phi = 0.05; N = 1;
// # ==================== states: [x, y, cos(yaw), sin(yaw)]
// # ==================== inputs: [translation_control, rotation_control, swing_control]
// # ==================== uses the gait-averaged forward-Euler method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.00014250000000000002 * u[0] * u[2] * x[2];
  xn[1] = x[1] + 0.00014250000000000002 * u[0] * u[2] * x[3];
  xn[2] = x[2] + -0.0475 * u[1] * u[2] * x[3];
  xn[3] = x[3] + 0.0475 * u[1] * u[2] * x[2];
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLARI AIS Kinematic model (2024/05/05) 9:29PM
// # ==================== gait frequency = 20Hz and TinyMPC frequency = <NOT_CONSTRAINED>;
// # ==================== H_phi = 0.05; N = <UNKNOWN>;
// # ==================== states: [x, y, cos(yaw), sin(yaw)]
// # ==================== inputs: [translation_control, rotation_control, swing_control]
// # ==================== uses the rk4 method
#include <math.h>
void tiny_Bicycle3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.16666666666666666 * (0.00028500000000000004 * u[0] * u[2] * x[2] + 0.0005700000000000001 * u[0] * (x[2] + -0.0475 * u[1] * u[2] * x[3]) * u[2] + 0.0005700000000000001 * u[0] * (x[2] + -0.0475 * u[1] * (x[3] + 0.0475 * u[1] * u[2] * x[2]) * u[2]) * u[2] + 0.00028500000000000004 * u[0] * (x[2] + -0.095 * u[1] * (x[3] + 0.0475 * u[1] * (x[2] + -0.0475 * u[1] * u[2] * x[3]) * u[2]) * u[2]) * u[2]);
  xn[1] = x[1] + 0.16666666666666666 * (0.00028500000000000004 * u[0] * u[2] * x[3] + 0.0005700000000000001 * u[0] * (x[3] + 0.0475 * u[1] * u[2] * x[2]) * u[2] + 0.0005700000000000001 * u[0] * (x[3] + 0.0475 * u[1] * (x[2] + -0.0475 * u[1] * u[2] * x[3]) * u[2]) * u[2] + 0.00028500000000000004 * u[0] * (x[3] + 0.095 * u[1] * (x[2] + -0.0475 * u[1] * (x[3] + 0.0475 * u[1] * u[2] * x[2]) * u[2]) * u[2]) * u[2]);
  xn[2] = x[2] + 0.16666666666666666 * (-0.095 * u[1] * u[2] * x[3] + -0.19 * u[1] * (x[3] + 0.0475 * u[1] * u[2] * x[2]) * u[2] + -0.19 * u[1] * (x[3] + 0.0475 * u[1] * (x[2] + -0.0475 * u[1] * u[2] * x[3]) * u[2]) * u[2] + -0.095 * u[1] * (x[3] + 0.095 * u[1] * (x[2] + -0.0475 * u[1] * (x[3] + 0.0475 * u[1] * u[2] * x[2]) * u[2]) * u[2]) * u[2]);
  xn[3] = x[3] + 0.16666666666666666 * (0.095 * u[1] * u[2] * x[2] + 0.19 * u[1] * (x[2] + -0.0475 * u[1] * u[2] * x[3]) * u[2] + 0.19 * u[1] * (x[2] + -0.0475 * u[1] * (x[3] + 0.0475 * u[1] * u[2] * x[2]) * u[2]) * u[2] + 0.095 * u[1] * (x[2] + -0.095 * u[1] * (x[3] + 0.0475 * u[1] * (x[2] + -0.0475 * u[1] * u[2] * x[3]) * u[2]) * u[2]) * u[2]);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CLARI AIS Kinematic model: SINDy, first-order polynomial TVregDiff (2024/06/01) 1:54PM
// # ==================== gait frequency = 20Hz and TinyMPC frequency = 10Hz;
// # ==================== H_phi = 0.05; N = 2;
// # ==================== states: [x, y, cos(yaw), sin(yaw)]
// # ==================== inputs: [translation_control, rotation_control]
// # ==================== uses the gait-averaged forward-Euler method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0];
  xn[1] = 0.1 * (-0.00602 + -0.0155 * u[0] + -0.00715 * u[1]) + x[1];
  xn[2] = x[2] + -0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[3] + 0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * (-1 * x[3] + -0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[2]);
  xn[3] = x[3] + 0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[2] + 0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * (x[2] + -0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[3]);
}

// CLARI AIS Kinematic model: SINDy, first-order polynomial TVregDiff (2024/06/01) 4:06PM
// # ==================== gait frequency = 20Hz and TinyMPC frequency = 10Hz;
// # ==================== H_phi = 0.05; N = 2;
// # ==================== states: [x, y, cos(yaw), sin(yaw)]
// # ==================== inputs: [translation_control, rotation_control]
// # ==================== uses the gait-averaged forward-Euler method
//////////////////// FIXED BODY VELOCITY INTEGRATION
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + -0.05 * (-0.00602 + -0.0155 * u[0] + -0.00715 * u[1]) * x[3] + -0.05 * (-0.00602 + -0.0155 * u[0] + -0.00715 * u[1]) * (x[3] + 0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[2]);
  xn[1] = x[1] + 0.05 * (-0.00602 + -0.0155 * u[0] + -0.00715 * u[1]) * x[2] + 0.05 * (-0.00602 + -0.0155 * u[0] + -0.00715 * u[1]) * (x[2] + -0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[3]);
  xn[2] = x[2] + -0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[3] + 0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * (-1 * x[3] + -0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[2]);
  xn[3] = x[3] + 0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[2] + 0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * (x[2] + -0.05 * (0.0213 + 0.515 * u[0] + 0.458 * u[1]) * x[3]);
}

// CLARI AIS Kinematic model: SINDy, first-order polynomial finiteDiff (2024/06/20) 5:50PM
// # ==================== gait frequency = 10Hz and TinyMPC frequency = 10Hz;
// # ==================== H_phi = 0.1; N = 1;
// # ==================== states: [x, y, cos(yaw), sin(yaw)]
// # ==================== inputs: [~translation_control, ~rotation_control]
// # ==================== uses the gait-averaged forward-Euler method
#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.1 * ((0.0263 + -0.0773 * u[0] + 0.8668 * u[1]) * x[2] + -1 * (-0.0008 + -0.013 * u[0] + -0.9974 * u[1]) * x[3]);
  xn[1] = x[1] + 0.1 * ((-0.0008 + -0.013 * u[0] + -0.9974 * u[1]) * x[2] + (0.0263 + -0.0773 * u[0] + 0.8668 * u[1]) * x[3]);
  xn[2] = x[2] + -0.1 * (-0.001 + 0.0437 * u[0] + -0.5123 * u[1]) * x[3];
  xn[3] = x[3] + 0.1 * (-0.001 + 0.0437 * u[0] + -0.5123 * u[1]) * x[2];
}

// CLARI AIS Kinematic model: SINDy, first-order polynomial finiteDiff (2024/07/06) 2:53PM
// # ==================== gait frequency = 10Hz and TinyMPC frequency = 10Hz;
// # ==================== H_phi = 0.1; N = 1;
// # ==================== states: [x, y, yaw]
// # ==================== inputs: [~translation_control, ~rotation_control]
// # ==================== uses the gait-averaged forward-Euler method#include <math.h>
void tiny_CLARI3dNonlinearDynamics_Raw(double* xn, const double* x, const double* u) {
  xn[0] = x[0] + 0.1 * (-1 * (-0.0008 + -0.013 * u[0] + -0.9974 * u[1]) * sin(x[2]) + (0.0263 + -0.0773 * u[0] + 0.8668 * u[1]) * cos(x[2]));
  xn[1] = x[1] + 0.1 * ((0.0263 + -0.0773 * u[0] + 0.8668 * u[1]) * sin(x[2]) + (-0.0008 + -0.013 * u[0] + -0.9974 * u[1]) * cos(x[2]));
  xn[2] = 0.1 * (-0.001 + 0.0437 * u[0] + -0.5123 * u[1]) + x[2];
}

